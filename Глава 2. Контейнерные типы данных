Часть 2. Контейнерные типы данных

***** Кортеж *****
//Создание кортежа. Неявное
let myProgramStatus = (200, "In work", true)
// Явное объявление кортежа
var floatStatus: (Float, String, Bool) = (200.2, "In work", true)
//Лучше не делать кортеж больше 7 элементов

// Инициализация значений в параметры
let (statusCode, statusText, statusConnect) = myProgramStatus
print(statusCode)
print(statusText)
print(statusConnect)

var (myName, myAge) = ("Баба Яга", 342)
//можно давать название переменной не для всех элементов кортежа
var (floatCode, _, _) = floatStatus

//Доступ к элементам кортежа через индексы
myProgramStatus.0
myProgramStatus.1
myProgramStatus.2

//Определение имен кортежа через литерал
let statusTuple = (statusCode: 400, statusText: "Error", statusConnect: false)
// обращение к элементам кортежа через имена
statusTuple.statusCode
statusTuple.statusText
statusTuple.statusConnect
statusTuple.0
statusCode

//бъявление кортежа с указанием имен элементов в описании типа
var anotherStatusTuple: (statusCode: Int, statusText: String, statusConnect: Bool) = (200, "In work", true)

///// Задачи \\\\\
/* Задача 1
Объявите константу и запишите в нее свое имя.
Объявите переменную типа UInt8 и запишите в нее свой возраст.
Объявите кортеж и явно определите его тип данных, как (name: String, age: Int).
В первый элемент кортежа запишите значение константы с именем.
Во второй элемент кортежа запишите значение из переменной с вашим возрастом.
*/
let name = "Анастасия"
var age: UInt8 = 29
var myData: (name: String, age: Int) = (name, Int(age))

/* Задача 2
 1. Объявите кортеж, способный хранить три значения типа Int16.
 2. Одним выражением объявите две константы типа Int и проинициализуйте им произвольные значения.
 3. В первые два значения кортежа запишите значения из данных переменных, а в третий их сумму.
 */
var myTuple1: (Int16, Int16, Int16)
let (a, b) = (7, 3)
myTuple1 = (Int16(a), Int16(b), Int16(a + b))

/* Задача 5
 Вам даны две целочисленные переменные со значениями 12 и 21. Поменяйте их значения местами без использования буферной переменной и математических операций.
 */
var d = 12, e = 21
(d, e) = (e, d)
print("d = \(d), e = \(e)")
/* Задача 6
 1) Создайте кортеж с двумя параметрами: ваш любимый фильм и ваше любимое число. Все элементы кортежа должны быть именованными.
 2) Одним выражением запишите каждый элемент кортежа в две константы. Проверьте значения параметров с помощью вывода в области результатов.
 3) Создайте псевдоним типа, используемого для первого кортежа, назовите его Man. Создайте второй кортеж типа Man, но описывающий другого человека (с другими значениями). Обратите внимание, что элементы кортежа так же должны иметь имена.
 4) Обменяйте значения в кортежах между собой.
 5) Создайте новый кортеж, элементами которого будут любимое число из первого кортежа, любимое число из второго кортежа и разница любимых чисел первого и второго кортежей.
 */
var myPerson: (favoriteFilm: String, favoriteNumber: Int) = ("1+1", 17)
var (film, number) = (myPerson.favoriteFilm, myPerson.favoriteNumber)
print("favorit film is \(film), favorite number is \(number)")
typealias Man = (favoriteFilm: String, favoriteNumber: Int)
var otherPerson: Man = ("kino", 25)
var bufferTuple: Man
bufferTuple = otherPerson
otherPerson = myPerson
myPerson = bufferTuple
var newTuple = (myPerson.favoriteNumber, otherPerson.favoriteNumber, myPerson.favoriteNumber - otherPerson.favoriteNumber)


***** Словари *****
//Создание словаря НЕявно [ключ_1:значение_1, ключ_2:значение_2, ..., ключ_N:значение_N]
var myDictionary1 = [200:"Success", 300:"Warning", 400:"Error"]
//Создание словаря с помощью Dictionary(dictionaryLiteral:)
//Dictionary(dictionaryLiteral:) - функция для создания словаря, принимающая список кортежей, каждый из которых определяет пару "ключ-значение"
//Dictionary(dictionaryLiteral: (ключ_1, значение_1), (ключ_2, значение_2), ...,(ключ_N, значение_N))
var myDictionary2 = Dictionary(dictionaryLiteral:(100, "сто"),(200,"двести"), (300, "триста"))
//Создание словаря с помощью Dictionary(uniqueKeysWithValues:)
//Dictionary(uniqueKeysWithValues:) - функция, позволяющая создать словарь на основе коллекции однотипных кортежей
let baseCollection = [(2,5),(3,6),(1,4)]
let newDictionary = Dictionary(uniqueKeysWithValues: baseCollection)
//zip(_:_:)- функция для создания одной последовательности пар ключ-значение из двух произвольных последовательностей
let nearestStarNames = ["Proxima Centauri", "Alpha Centauri A", "Alpha Centauri B"]
let nearestStarDistances = [4.24, 4.37, 4.37]
let starDistanceDict = Dictionary(uniqueKeysWithValues: zip(nearestStarNames, nearestStarDistances))
// Явное задание словаря
/* Полная форма записи:
 let имяСловаря: Dictionary<T1,T2> = литерал_словаря
Краткая форма записи:
 let имяСловаря: [T1:T2] = литерал_словаря
*/
//взаимодействие с элементами словаря
var countryDict = ["RUS":"Россия", "BEL":"Белоруссия", "UKR": "Украина"]
var countryName = countryDict["BEL"]
countryDict["RUS"] = "Российская Федерация"
print(countryDict)
//updateValue(_:forKey:) - метод для изменения значения элемента словаря. Возвращаает старое значение или nil. Создает новый элемент при обращении к несуществующему
var oldValueOne = countryDict.updateValue("Республика Беларусь", forKey: "BEL")
var oldValueTwo = countryDict.updateValue("Эстония", forKey:"EST")
print(countryDict)
//Добавление элемента в словарь
countryDict["TUR"] = "Турция"
print(countryDict)
//removeValue(forKey:) метод для удаления значения
countryDict.removeValue(forKey: "UKR")
//Удалить элемент из словаря можно, присвои значение nil
countryDict["EST"] = nil
print(countryDict)
//Создание пустого словаря
let emptyDictionary: [String:Int] = [:]
let anotherEmptyDictionary = Dictionary<String, Int>()
//Базовые свойства и методы словарей
//count - свойство, возвращает количество элементов в словаре
countryDict.count
//isEmpty - возвращает true, если словарь пустой
countryDict.isEmpty
emptyDictionary.isEmpty
//keys - метод для получения ключей словаря
starDistanceDict.keys
//values - получение значений словаря
starDistanceDict.values
let myArray =  Array(starDistanceDict.values)
//строка-коллекция символов
//графем-кластер
let thumbs = "\u{1f44d}"
let blackSkin = "\u{1f3fd}"
let combine1: Character = "\u{1f44d}\u{1f3fd}"
let combine2 = "\u{1f44d}\u{65}"
type(of: combine1)
//starIndex - метод, возращающий индекс первого элемента
let name1 = "e\u{301}lastic"
let index1 = name1.startIndex
print(index1)
let firstChar = name1[index1]
//endIndex позволяющее получить индекс, который следует за последним символом в строке
let indexLastChar = name1.endIndex
//index(before:) - метод, позволяет получить ндекс символа, предшествующего тому, индекс которого передан в качестве аргумента before
let lastCharIndex = name1.index(before: indexLastChar)
name1[lastCharIndex]
//index(after:) - метод для получения индекса последующего символа
//index(_:offsetBy:) - позволяет получить требуемый символ с учетом отступа. В качестве первого аргумента передается индекс графем-кластера, от которого будет происходить отсчет, а в качестве значения входного параметра offsetBy передается целое число, указывающее на отступ вправо
let fourCharIndex = name1.index(name1.startIndex, offsetBy: 3)
name1[fourCharIndex]
name1.unicodeScalars
