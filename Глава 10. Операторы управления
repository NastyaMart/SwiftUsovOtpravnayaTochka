// Утверждения

// assert(проверяемое выражение, отладочное сообщение)
let someVar = 154
assert(someVar > 100, "Данные не верны")
assert (someVar < 200)

let strName = "Дракон"
let strYoung = "молод"
let strOld = "стар"
let strEmpty = " "
var dragonAge = 230
assert(dragonAge <= 235, strName + strEmpty + strOld)
assert(dragonAge >= 225, strName + strEmpty + strYoung)
print("Программа успешно завершила свою работу")


// Опереатор if
let userName = "Helga"
if userName == "Alex" {
    print("Hello admin")
}

var logicVar = true
if logicVar {
    print("Переменная logicVar истинна")
}

if userName == "Alex" {
    print("Hello admin")
} else if userName == "Bazil" {
    print("Hello moderator")
} else if userName == "Helga" {
    print("Hello redactor")
} else {
    print("Hello user")
}

// тернарный синтаксис
let x = 70
let y = (x > 100 ? 100 : 50)


// Опереатор ветвления switch

var userMark: Float = 4.8
switch userMark {
case 1..<3:
    print("Экзамен не сдан")
case 3:
    print("Необходимо выполнить дополнительные задания")
case 4...5:
    print("Экзамен сдан")
default:
    print("Указана некоррекнтая оценка")
}

let answer: (code: Int, message: String) = (300, "Page not found")
switch answer {
case(100..<400, _):
    print(answer.message)
case(400..<500, _):
    assert(false, answer.message)
default:
    print ("Получен некорректный код")
}

let dragonCharacteristics: (color: String, weight: Float) = ("red", 1.4)
switch dragonCharacteristics {
case ("green", 0..<2):
    print("Volyer 1")
case ("red", 0..<2):
    print("Volyer 2")
case (_, 2...):
    print("Volyer 3")
default:
    ("Дракон не может быть принят в стаю")
}

//fallthrough - ключевое слово, которое позволяет перейти к телу следующего case-блока. Выполнятся условия текущего блока и следующего
let level: Character = "B"
switch level {
case "A":
    print ("A")
    fallthrough
case "B":
    print ("B")
    fallthrough
case "C":
    print("C")
default:
    break
}

